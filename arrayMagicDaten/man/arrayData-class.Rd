%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This file was automatically generated by Rdoc on 2006-04-12  8:38:16.
% Do NOT modify this file, instead modify the source (/buness/R/TestingOfarrayMagic/Rpacks/arrayMagic/R/arrayData-class.R).
% Rdoc is copyright (C) 2001, Henrik Bengtsson, henrikb@braju.com.
% Download the Rdoc compiler at http://www.braju.com/R/
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


 \name{arrayData-class}
 \docType{class}

 \alias{arrayData-class}
 \alias{arrayData}

 \alias{intensities<-}
 \alias{weights<-}
 \alias{spotAttr<-}
 \alias{hybAttrList<-}
 \alias{getIntensities}
 \alias{getWeights}
 \alias{getSpotAttr}
 \alias{getHybAttr}
 \alias{getHybAttrGreen}
 \alias{getHybAttrRed}
 \alias{getHybAttrList}
 \alias{as.RGList}

 \alias{intensities<-,arrayData-method}
 \alias{weights<-,arrayData-method}
 \alias{spotAttr<-,arrayData-method}
 \alias{hybAttrList<-,arrayData-method}
 \alias{getIntensities,arrayData-method}
 \alias{getWeights,arrayData-method}
 \alias{getSpotAttr,arrayData-method}
 \alias{getHybAttr,arrayData-method}
 \alias{getHybAttrGreen,arrayData-method}
 \alias{getHybAttrRed,arrayData-method}
 \alias{getHybAttrList,arrayData-method}
 \alias{as.RGList,arrayData-method}
 \alias{initialize,arrayData-method}
 \alias{[,arrayData-method}
 \alias{show,arrayData-method}



 \title{Class arrayData, a simple container for
        raw data and related information }


 \description{ A simple class to store
        raw data, annotation information for spots and
        hybridisations, as well as weights.
        }

\section{Creating Objects}{
 \code{  new('arrayData',}\cr
 \code{    intensities = ..., # optional; object of class array}\cr
 \code{    weights     = ..., # optional; object of class matrix}\cr
 \code{    spotAttr    = ..., # optional; object of class data.frame}\cr
 \code{    hybAttrList = ..., # optional; list of two objects of class data.frame}\cr
 \code{  )}
}

\section{Slots}{
  \describe{
    \item{\code{intensities}:}{Object of class \code{array};
                               three-dimensional;
        dim = nrOfSpots x nrOfChannels x nrOfHybridisations;
        second dimension must contain "green"  and "red" and possibly
        "greenBackground" and "redBackground"; default: \code{NULL}}
    \item{\code{weights}:}{Object of class \code{matrix};
                           dim = nrOfSpots x nrOfHybridisations;
                           range = [0,1]; default: \code{NULL}.
         }
    \item{\code{spotAttr}:}{Object of class \code{data.frame};
                            dim = nrOfSpots x nrOfSpotCharacteristics;
        default: \code{NULL}}
    \item{\code{hybAttrList}:}{list of two objects named "green" and "red"
        of class \code{data.frame}; the dimension of
        each \code{data.frame} is given by
        nrOfHybridisations x nrOfHybridisationCharacteristics ;
        default: \code{NULL}}
  }
}

 \section{Methods}{
  \describe{

    \item{intensities<-}{(arrayData): Set the \code{intensities} of
                           \code{arrayData}. }
    \item{getIntensities}{(arrayData): Returns the \code{intensities}
                           \code{array}.}
    \item{weights<-}{(arrayData): Set the \code{weights} of
                           \code{arrayData}. }
    \item{getWeights}{(arrayData): Returns the \code{weights} object. }
    \item{spotAttr<-}{(arrayData): Set the \code{spotAttr} of
                           \code{arrayData}. }
    \item{getSpotAttr}{(arrayData): Returns the \code{spotAttr} \code{data.frame}.}
    \item{getHybAttr}{(arrayData): Returns the "intersection" of the "red"
                      and "green" \code{data.frame} of \code{hybAttrList}
                      or if one is \code{NULL} the other one. The "intersection"
                      are those columns which match in column name and its content
                      otherwise \code{NULL} is returned.}
    \item{getHybAttrGreen}{(arrayData): Returns the "green" list element 
                         of \code{hybAttrList}, i.e. a \code{data.frame}. }
    \item{getHybAttrRed}{(arrayData): Returns the "red" list element
                         of \code{hybAttrList}, i.e. a \code{data.frame}. }
    \item{hybAttrList<-}{(arrayData): Set the \code{hybAttrList} of
                           \code{arrayData}. }
    \item{getHybAttrList}{(arrayData): Returns the \code{hybAttrList} object. }
    \item{as.RGList}{(arrayData): Returns an object of \code{RGList}.
      Foreground and background intensity values of \code{intensities}
      are returned in form of an \code{RGList} object. If no background
      is given, all background values in the RGList object are
      set to zero.}


    \item{show}{(arrayData): Renders information about the \code{arrayData} object
                             on standard out.}
    \item{[}{(arrayData,i,j):
             A subset operator, where i corresponds to the spots and
             j to the hybridisations.}

    \item{cbind}{(...): Concatenates \code{arrayData} objects.
                        Spots/rows are assumed to match;
                        possibly you have to subset and reorder
                        the objects beforehand
                        cf. function \code{\link{cbind.arrayData}}.
                }

     
  }
}

 \seealso{
           \code{\link{exprSetRG-class}}
         }

 \keyword{methods}
 \keyword{classes}

 \examples{

intensities <- array(data=runif(120),dim=c(20,2,3))
dimnames(intensities) <- list(NULL, c("green","red"), NULL)
spotAttr <- data.frame(Name=I(rep(c("x","y","k","l","z"),4)),
                       Index=c(1:20))
arrayDataObject <- new("arrayData", intensities=intensities, weights=intensities[,1,],
                       spotAttr=spotAttr, hybAttrList=NULL)
print(arrayDataObject)
hybs <- c(1,3)
spots <- c(1:10, 14)
aD <- arrayDataObject[spots,hybs]
print(aD)
stopifnot( all( getIntensities(arrayDataObject)[spots, , hybs] == getIntensities(aD) ) )
stopifnot( all( getWeights(arrayDataObject)[spots, hybs] == getWeights(aD) ) )
stopifnot( all( getSpotAttr(arrayDataObject)[spots, ] == getSpotAttr(aD) ) )

hybAttr <- data.frame(Name=I(c("hx","hy","hz")),
                      Index=c(1:3))
arrayDataObject <- new("arrayData", intensities=intensities, weights=intensities[,1,],
                       spotAttr=spotAttr, hybAttrList=list(green=hybAttr,red=hybAttr))
hybAttrGreen <- data.frame(Name=I(c("hx","hy","hz")),
                      Index=c(4:6))
aDObject <- new("arrayData", intensities=intensities, weights=intensities[,1,],
                       spotAttr=spotAttr, hybAttrList=list(green=hybAttrGreen,red=hybAttr))
print(arrayDataObject)
cbind(aDObject,aDObject)
hybs <- c(1)
spots <- c(1)
aD <- arrayDataObject[spots,hybs]
print(aD)
stopifnot( all( getIntensities(arrayDataObject)[spots, , hybs] == getIntensities(aD) ) )
stopifnot( all( getWeights(arrayDataObject)[spots, hybs] == getWeights(aD) ) )
stopifnot( all( getSpotAttr(arrayDataObject)[spots, ] == getSpotAttr(aD) ) )
stopifnot( all( getHybAttr(arrayDataObject)[spots, ] == getHybAttr(aD) ) )
stopifnot( all( getHybAttrRed(arrayDataObject)[spots, ] == getHybAttrRed(aD) ) )
stopifnot( all( getHybAttrGreen(arrayDataObject)[spots, ] == getHybAttrGreen(aD) ) )

stopifnot( all( getHybAttrRed(aDObject) == hybAttr) )
stopifnot( all( getHybAttrGreen(aDObject) == hybAttrGreen) )
stopifnot( all( getHybAttr(aDObject) == data.frame(Name=I(c("hx","hy","hz"))) ) )
weights(aDObject) <- intensities[,2,]
intensities(aDObject) <- intensities
spotAttr(aDObject) <- spotAttr
hybAttrList(aDObject) <- list(green=hybAttr,red=hybAttrGreen)
aD <- new("arrayData")
stopifnot( class(aD) == "arrayData" )
 \dontshow{
 print(aD)
 xAD<-cbind(aD,aD)
 weights(aD) <- matrix(1,nrow=2,ncol=3)
 xAD<-cbind(aD,aD)
 spotAttr(aD) <- data.frame(hallo=c("a","b"))
 xAD<-cbind(aD,aD)
 hybAttrRed <- data.frame(colour=1:3)
 hybAttrGreen <- data.frame(colour=10:12)
 hybAttrList <- list(red=hybAttrRed,green=hybAttrGreen)
 hybAttrList(aD) <- hybAttrList
 xAD<-cbind(aD,aD)
 intensities <- array(data=c(1:12),dim=c(2,2,3))
 dimnames(intensities) <- list(NULL, c("green","red"), NULL)
 intensities(aD) <- intensities
 xAD<-cbind(aD,aD)
 rg <- as.RGList(aD)
 i <- intensities * 0
 aD2<- aD
 intensities(aD2) <- i
 weights(aD2) <- getWeights(aD2) * 0.5
 xAD2 <- cbind(aD, aD2)
 stopifnot( all( getIntensities(xAD2[,1:3])  == getIntensities(aD) ) )
 stopifnot( all( getIntensities(xAD2[,4:6])  == getIntensities(aD2) ) )
 stopifnot( all( getWeights(xAD2[,1:3])  == getWeights(aD) ) )
 stopifnot( all( getWeights(xAD2[,4:6])  == getWeights(aD2) ) )
 aDThreeA <- cbind(aD,aD,aD)
 aDThreeB <- cbind( aD, cbind(aD,aD) )
 aDThreeC <- cbind( cbind(aD,aD), aD)
 stopifnot( identical( aDThreeA, aDThreeC ) )
 stopifnot( all( getSpotAttr(aDThreeA)[,1,drop=FALSE] == getSpotAttr(aD) ) )
 stopifnot( identical(getSpotAttr(aDThreeA), getSpotAttr(aDThreeB) ) )
 stopifnot( identical(getWeights(aDThreeA), getWeights(aDThreeB) ) )
 stopifnot( identical(getIntensities(aDThreeA), getIntensities(aDThreeB)))
 stopifnot( all(getHybAttrGreen(aDThreeA) == getHybAttrGreen(aDThreeB)))
 stopifnot( all(getHybAttrGreen(aDThreeA) == getHybAttrGreen(aDThreeB)))
 }
}
 \author{Andreas Buness <a.buness@dkfz.de>}
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% End of File
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
