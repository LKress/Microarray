%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This file was automatically generated by Rdoc on 2006-04-12  8:38:17.
% Do NOT modify this file, instead modify the source (/buness/R/TestingOfarrayMagic/Rpacks/arrayMagic/R/readIntensities.R).
% Rdoc is copyright (C) 2001, Henrik Bengtsson, henrikb@braju.com.
% Download the Rdoc compiler at http://www.braju.com/R/
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


 \name{readIntensities}

 \title{readIntensities}

 \alias{readIntensities}

 \description{
              The function takes the \code{data.frame}
              \code{slideDescription} as input and reads
              the listed image analysis raw data files of
              the column \code{slideNameColumn}; cf.
              function \code{\link{readpDataSlides}}. Each
              image analysis raw data file must contain
              tab separated columns and a header line -
              not necessarily at the top of the file; cf.
              the arguments \code{removePatterns} and
              \code{skip}. Each file may only contain the
              information for one channel, cf. argument
              \code{channelColumn}.
              The raw data information is returned as an
              object of class \code{\link{arrayData}}.
              Note: All image analysis quantification
              (=raw data) files have to correspond
              to the same type of microarray.
             }

 \details{Details on the argument \code{type}:
     \code{type="GenePix"} defines 
     \code{spotAnnoColumns =  c("Block", "Column", "Row", "Name", "ID")}
     and
     \code{dataColumns = c("F532.Median", "B532.Median",
                           "F635.Median", "B635.Median")} and corresponding
     \code{names(dataColumns) = c("greenForeground", "greenBackground",
      "redForeground", "redBackground")}, a dynamically determined argument 
     \code{skip =  grep("Block...Column", imageFile) - 1} and
     \code{removePatterns = NULL},
     whereas
     \code{type="ScanAlyze"} defines
     \code{spotAnnoColumns = c( "HEADER", "SPOT", "GRID", "ROW", "COL" )}
     and
     \code{dataColumns = c("CH1I", "CH1B", "CH2I", "CH2B")} and corresponding
     \code{names(dataColumns) = c("greenForeground", "greenBackground",
                                  "redForeground", "redBackground")},
     \code{skip = 0} and
     \code{removePatterns = c("^REMARK")}.
     }   
 \usage{readIntensities(slideDescription, fileNameColumn="fileName", slideNameColumn, channelColumn = NULL, loadPath=".", type = "GenePix", spotAnnoColumns = NULL, dataColumns = NULL, removePatterns = NULL, skip = NULL, spotIdentifier, ..., verbose = TRUE)}

 \arguments{
  \item{slideDescription}{\code{data.frame}; required; default: missing.
         (cf. the return value of the function \code{\link{readpDataSlides}})
         The \code{data.frame} must contain at least one column;
         this column has to be named as the argument \code{fileNameColumn}.
         It may additionally contain a column named \code{slideNameColumn}.
                         }
  \item{fileNameColumn}{ character string; required; default: "fileName".
                         \code{fileNameColumn} specifies the column which
                         contains all image quantification result files
                         in the \code{data.frame} of argument
                         \code{slideDescription}.}
  \item{slideNameColumn}{ character string; optional; default missing;
        refers to the \code{data.frame} of argument \code{slideDescription}.
        If \code{slideNameColumn} is missing the value is set
        to \code{fileNameColumn}.}
 \item{channelColumn}{ named vector of character strings;
                       optional; default \code{NULL}. 
         If the \code{data.frame} of argument
         \code{slideDescription} contains information
         for each channel of every slide/hybridisation separately, the
         \code{channelColumn} vector contains the column name of the
         \code{data.frame} of argument \code{slideDescription}
         used to specify the channel.
         If \code{length(channelColumn) == 1} the character strings
         "green" and "red" are assumed to be used for the coding,
         otherwise \code{names(channelColumn)} must contain:
         \code{c("channelColumnName","green","red")}.
                     }
  \item{loadPath}{ character string; required; default: ".".
      The path is used to load the image quantification result files;
      note: "." refers to the working directory.
      }
  \item{spotIdentifier}{ character string; optional; default missing.
                         \code{spotIdentifier} specifies the column
                         in the image analysis result files which contain
                         spot or gene identifiers.}
  \item{type}{character string; required;
              possible values: "GenePix", "ScanAlyze",
              "generic" and "genericOneFilePerChannel";
              cf. Details section.
              Note: value "generic" requires the arguments
              \code{spotAnnoColumns}, \code{dataColumns}
              and possibly \code{skip} and \code{removePatterns},
              value "genericOneFilePerChannel" additionally requires
              the argument "channelColumn";
              whereas "GenPix"
              and "ScanAlyze" use predefined values if not
              otherwise specified;
              default: "GenePix".}
  \item{spotAnnoColumns}{ vector of character strings;
        the column names of the image analysis data file.
        The columns must contain the same information for all
        files, e.g. the information on the layout of the microarray.
        The argument \code{spotIdentifier} is automatically
        added to the vector if not already included; default: \code{NULL} }
  \item{dataColumns}{ named vector of character strings;
         the column names of the image analysis data file.
         The columns  contain the raw intensities values of each spot; 
         \code{names(dataColumns)} must contain:
         \code{c("greenForeground", "greenBackground",
                 "redForeground", "redBackground")};
         default: \code{NULL}
       }
  \item{removePatterns}{ vector of character string(s) each defining
               a regular expression; default: \code{NULL};
               all lines of each image analysis raw data file,
               which match any of the regular expression(s) are discarded.
             }
  \item{skip}{ integer; default: \code{NULL};
               number of lines skipped in each image analysis data file;
               Argument \code{skip} applies after all lines matched by
               one of the arguments of
               \code{removePatterns} have been discarded.
             }
  \item{...}{ further arguments which are passed to \code{\link{read.table}}.
              A function which is used inside this function. The arguments
              must not include \code{sep},  \code{header}, \code{as.is}
              and \code{skip} (for \code{skip} cf. above).
            }
  \item{verbose}{logical; required; default \code{TRUE}}

 }

 \value{object of class \code{\link{arrayData}}}

 \seealso{ \code{\link{readpDataSlides}},
           \code{\link{arrayData-class}}
   }

 \keyword{IO}

 \author{Andreas Buness <a.buness@dkfz.de>}

 \examples{

   \dontshow{

       LOADPATH <- file.path(.path.package("arrayMagic"), "extdata")

 	slideDescription <- readpDataSlides(
                             loadPath=LOADPATH, 
                             slideDescriptionFile="genericSlidesDescription"
                           )
       dataColumns=c("a","b","c","d")
       names(dataColumns)= c("greenForeground","greenBackground",
                             "redForeground","redBackground")
       resultObject <- readIntensities(slideDescription=slideDescription,
                                       fileNameColumn="files",
                                       loadPath=LOADPATH,
                                       type="generic",
                                       spotAnnoColumns=c("e","f"),
                                       dataColumns=dataColumns,
                                       skip=7
                                      )

 	slideDescriptionB <- readpDataSlides(
                             loadPath=LOADPATH, 
                             slideDescriptionFile="genericSlidesTwoColourDescription"
                           )
       channelColumn <-  "channel"
       resultObjectB <- readIntensities(slideDescription=slideDescriptionB,
                                        fileNameColumn="files",
                                        loadPath=LOADPATH,
                                        channelColumn=channelColumn,
                                        type="generic",
                                        spotAnnoColumns=c("e","f"),
                                        dataColumns=dataColumns,
                                        skip=7
                                       )
 	slideDescriptionC <- readpDataSlides(
                             loadPath=LOADPATH, 
                             slideDescriptionFile="genericSlidesTwoColourDescription2"
                           )
       channelColumn <-  c("channel","xgreen","xred")
       names(channelColumn) <- c("channelColumnName", "green", "red")
       resultObjectC <- readIntensities(slideDescription=slideDescriptionC,
                                        fileNameColumn="files",
                                        loadPath=LOADPATH,
                                        channelColumn=channelColumn,
                                        type="generic",
                                        spotAnnoColumns=c("e","f"),
                                        dataColumns=dataColumns,
                                        skip=7
                                       )

     stopifnot( all( match(unlist(getHybAttr(resultObjectB)), unlist(getHybAttr(resultObjectC)))))
      stopifnot( all(unlist(getHybAttrRed(resultObjectB)[,c("files","name","sample")]) ==
                     unlist(getHybAttrRed(resultObjectC)[c(1,3,2),c("files","name","sample")])))

      stopifnot( all(unlist(getHybAttrGreen(resultObjectB)[,c("files","name","sample")]) ==
                     unlist(getHybAttrGreen(resultObjectC)[c(1,3,2),c("files","name","sample")])))

 	slideDescriptionD <- readpDataSlides(
                             loadPath=LOADPATH, 
                             slideDescriptionFile="genericSlidesTwoColourDescription3"
                           )
       channelColumn <-  c("channel","xgreen","xred")
       names(channelColumn) <- c("channelColumnName", "green", "red")
       resultObjectD <- readIntensities(slideDescription=slideDescriptionD,
                                        fileNameColumn="files",
                                        loadPath=LOADPATH,
                                        channelColumn=channelColumn,
                                        type="generic",
                                        spotAnnoColumns=c("e","f"),
                                        dataColumns=dataColumns,
                                        skip=7
                                       )
     stopifnot( all( match(unlist(getHybAttr(resultObjectC)), unlist(getHybAttr(resultObjectD)))))

 stopifnot( all(getHybAttrRed(resultObjectC)[,c("files","name","sample","channel")] ==
                getHybAttrRed(resultObjectD)[,c("files","name","sample","channel")]))

 stopifnot( all(getHybAttrGreen(resultObjectC)[,c("files","name","sample","channel")] ==
                getHybAttrGreen(resultObjectD)[,c("files","name","sample","channel")]))

slideDescription <- data.frame(fileName="lc7b048rex2.DAT")
r <- readIntensities(slideDescription=slideDescription, loadPath=LOADPATH, type="ScanAlyze")
slideDescription <- data.frame(fileName="lc7b048rex.DAT")
r2 <- readIntensities(slideDescription=slideDescription, loadPath=LOADPATH, type="ScanAlyze")
 spotAnnoColumns <- c( "HEADER", "SPOT", "GRID", "ROW", "COL" )
 dataColumns <- c("CH1I", "CH1B", "CH2I", "CH2B")
 names(dataColumns) <-  c("greenForeground","greenBackground","redForeground","redBackground")
  r3 <- readIntensities(slideDescription=slideDescription, loadPath=LOADPATH, spotAnnoColumns = spotAnnoColumns, dataColumns=dataColumns, type="generic")
 stopifnot(  all( getIntensities(r) == getIntensities(r2) ) )
 stopifnot(  all( getIntensities(r) == getIntensities(r3) ) )


   }

 }

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% End of File
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
